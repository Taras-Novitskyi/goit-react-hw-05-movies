{"version":3,"file":"static/js/779.91425f64.chunk.js","mappings":"uRAEaA,EAAOC,EAAAA,GAAAA,GAAH,qEAKJC,EAASD,EAAAA,GAAAA,EAAH,6CAINE,EAASF,EAAAA,GAAAA,EAAH,kEAKNG,EAAQH,EAAAA,GAAAA,EAAH,oF,mBC2BlB,EArCgB,WACd,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAeA,IAbAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,gHAE8BC,EAAAA,EAAAA,IAAiBN,GAF/C,gBAEYO,EAFZ,EAEYA,QACRH,EAAWG,GAHf,gDAKIC,QAAQC,IAAR,MALJ,0DADc,uBAAC,WAAD,wBAUdC,EACD,IAEIP,EAIL,OAAuB,IAAnBA,EAAQQ,QACH,SAACZ,EAAD,yDAIL,SAACa,EAAA,EAAD,CAAKC,GAAG,KAAR,SACGV,EAAQW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAACtB,EAAD,YACE,UAACE,EAAD,sBAAiBmB,MACjB,SAAClB,EAAD,UAASmB,MAFAF,EADA,KAQpB,C,kMCvCKG,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAkB,mCAAG,2GAAOC,EAAP,+BAAY,EAAZ,UACTF,EAAAA,EAAAA,GAAM,sBAAuB,CAClDG,OAAQ,CACNC,QAASL,EACTM,SAAU,QACVH,KAAAA,KAL4B,uBACxBI,EADwB,EACxBA,KADwB,kBASzBA,GATyB,2CAAH,qDAYlBC,EAAgB,mCAAG,WAAM1B,GAAN,0FACPmB,EAAAA,EAAAA,GAAM,SAAD,OAAUnB,GAAW,CAC/CsB,OAAQ,CACNC,QAASL,KAHiB,uBACtBO,EADsB,EACtBA,KADsB,kBAMvBA,GANuB,2CAAH,sDAShBE,EAAgB,mCAAG,WAAOC,GAAP,8FAAcP,EAAd,+BAAmB,EAAnB,UACPF,EAAAA,EAAAA,GAAM,eAAgB,CAC3CG,OAAQ,CACNC,QAASL,EACTU,MAAAA,EACAP,KAAAA,KAL0B,uBACtBI,EADsB,EACtBA,KADsB,kBAQvBA,GARuB,2CAAH,sDAYhBI,EAAa,mCAAG,WAAM7B,GAAN,0FACJmB,EAAAA,EAAAA,GAAM,SAAD,OAAUnB,EAAV,YAA6B,CACvDsB,OAAQ,CACNC,QAASL,EACTM,SAAU,WAJa,uBACnBC,EADmB,EACnBA,KADmB,kBAOpBA,GAPoB,2CAAH,sDAUbnB,EAAgB,mCAAG,WAAMN,GAAN,0FACPmB,EAAAA,EAAAA,GAAM,SAAD,OAAUnB,EAAV,YAA6B,CACvDsB,OAAQ,CACNC,QAASL,EACTM,SAAU,WAJgB,uBACtBC,EADsB,EACtBA,KADsB,kBAOvBA,GAPuB,2CAAH,qD","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/fetchApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Item = styled.li`\n  list-style: none;\n  margin-bottom: 32px;\n`;\n\nexport const Author = styled.p`\n  font-weight: 700;\n`;\n\nexport const Review = styled.p`\n  margin-top: 16px;\n  line-height: 1.5;\n`;\n\nexport const Error = styled.p`\n  padding: 16px;\n  fonst-size: 20px;\n  font-weight: 600;\n`;\n\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchFilmReviews } from '../../services/fetchApi';\nimport { Item, Author, Review, Error } from './Reviews.styled';\nimport { Box } from 'components/Box/Box';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    async function fetchAPI() {\n      try {\n        const { results } = await fetchFilmReviews(movieId);\n        setReviews(results);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchAPI();\n  });\n\n  if (!reviews) {\n    return;\n  }\n\n  if (reviews.length === 0) {\n    return <Error>We don't have any reviews for this movie.</Error>;\n  }\n\n  return (\n      <Box as=\"ul\">\n        {reviews.map(({ id, author, content }) => (\n          <Item key={id}>\n            <Author>Author: {author}</Author>\n            <Review>{content}</Review>\n          </Item>\n        ))}\n      </Box>\n  );\n};\n\nexport default Reviews;\n\n","import axios from 'axios';\n\nconst API_KEY = '894ef72300682f1db325dae2afe3e7e2';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const FetchTrendingFilms = async (page=1) => {\n  const { data } = await axios('trending/movie/week', {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      page,\n    },\n  });\n\n  return data;\n};\n\nexport const FetchFilmDetails = async movieId => {\n  const { data } = await axios(`movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data;\n};\n\nexport const fetchSearchFilms = async (query, page=1) => {\n  const { data } = await axios('search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n      page,\n    },\n  });\n  return data;\n};\n\n\nexport const fetchFilmCast = async movieId => {\n  const { data } = await axios(`movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return data;\n}\n\nexport const fetchFilmReviews = async movieId => {\n  const { data } = await axios(`movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return data;\n};"],"names":["Item","styled","Author","Review","Error","movieId","useParams","useState","reviews","setReviews","useEffect","fetchFilmReviews","results","console","log","fetchAPI","length","Box","as","map","id","author","content","API_KEY","axios","FetchTrendingFilms","page","params","api_key","language","data","FetchFilmDetails","fetchSearchFilms","query","fetchFilmCast"],"sourceRoot":""}